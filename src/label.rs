//! Items related to parser labelling.

use super::*;

/// A trait implemented by [`Error`]s that can originate from labelled parsers. See [`Parser::labelled`].
pub trait LabelError<'a, I: Input<'a>, L>: Error<'a, I> {
    /// Annotate the expected patterns within this parser with the given label.
    ///
    /// In practice, this usually removes all other labels and expected tokens in favor of a single label that
    /// represents the overall pattern.
    fn label_with(&mut self, label: L);

    /// Annotate this error, indicating that it occurred within the context denoted by the given label.
    ///
    /// A span that runs from the beginning of the context up until the error location is also provided.
    ///
    /// In practice, this usually means adding the context to a context 'stack', similar to a backtrace.
    fn in_context(&mut self, label: L, span: I::Span);
}

/// See [`Parser::labelled`].
#[derive(Copy, Clone)]
pub struct Labelled<A, L> {
    pub(crate) parser: A,
    pub(crate) label: L,
    pub(crate) is_context: bool,
}

impl<A, L> Labelled<A, L> {
    /// Specify that the label should be used as context when reporting errors.
    ///
    /// This allows error messages to use this label to add information to errors that occur *within* this parser.
    pub fn as_context(self) -> Self {
        Self {
            is_context: true,
            ..self
        }
    }
}

impl<'a, I, O, E, A, L> ParserSealed<'a, I, O, E> for Labelled<A, L>
where
    I: Input<'a>,
    E: ParserExtra<'a, I>,
    A: Parser<'a, I, O, E>,
    L: Clone,
    E::Error: LabelError<'a, I, L>,
{
    #[inline]
    fn go<M: Mode>(&self, inp: &mut InputRef<'a, '_, I, E>) -> PResult<M, O> {
        // save potential alternate errors generated before this parser has run
        let old_alt = inp.errors.alt.take();
        // note position in source
        let before = inp.save();
        // run labelled parser
        let res = self.parser.go::<M>(inp);

        // TODO: Label secondary errors too?

        // note any alternate errors generated by labelled parser
        let new_alt = inp.errors.alt.take();
        // reset input's alternate error back to old one
        inp.errors.alt = old_alt;

        // if we have any new alt errors generated
        if let Some(mut new_alt) = new_alt {
            
            let before_next = before.offset.into() + 1;
            if new_alt.pos.into() == before_next {
                new_alt.err.label_with(self.label.clone());
            } else if self.is_context && new_alt.pos.into() > before_next {
                // SAFETY: offsets generated by previous call to `InputRef::next` (or similar).
                let span = unsafe { inp.input.span(before.offset..new_alt.pos) };
                new_alt.err.in_context(self.label.clone(), span);
            }
            // new_alt.err.label_with(self.label.clone());
            // record new_alt as alternative error
            inp.add_alt_err(new_alt.pos, new_alt.err);
        }

        if self.is_context {
            let before_offset = before.offset;
            for err in inp.errors.secondary_errors_since(before.err_count) {
                // SAFETY: offsets generated by previous call to `InputRef::next` (or similar).
                let span = unsafe { inp.input.span(before_offset..err.pos) };
                err.err.in_context(self.label.clone(), span);
            }
        }

        res
    }

    go_extra!(O);
}
